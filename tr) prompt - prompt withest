[1mdiff --git a/project_two.py b/project_two.py[m
[1mdeleted file mode 100644[m
[1mindex dc35c67..0000000[m
[1m--- a/project_two.py[m
[1m+++ /dev/null[m
[36m@@ -1,208 +0,0 @@[m
[31m-[m
[31m-[m
[31m-import time[m
[31m-import pandas as pd[m
[31m-import numpy as np[m
[31m-[m
[31m-CITY_DATA = { 'chicago': 'chicago.csv',[m
[31m-              'new york city': 'new_york_city.csv',[m
[31m-              'washington': 'washington.csv' }[m
[31m-[m
[31m-MONTH_DATA = ['all', 'january', 'february', 'march', 'april', 'may', 'june'][m
[31m-[m
[31m-DAY_DATA = ['all', 'monday', 'tuesday', 'wednesday', 'friday', 'saturday', 'sunday'][m
[31m-[m
[31m-def get_filters():[m
[31m-[m
[31m-    print('Hello! Let\'s explore some US bikeshare data!')[m
[31m-    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs[m
[31m-    city_name = ''[m
[31m-    while city_name.lower() not in CITY_DATA:[m
[31m-        city_name = input("\nWhat is the name of the city to analyze data? (E.g. Input either chicago, new york city, washington)\n")[m
[31m-        if city_name.lower() in CITY_DATA:[m
[31m-            #We were able to get the name of the city to analyze data.[m
[31m-            city = CITY_DATA[city_name.lower()][m
[31m-        else:[m
[31m-            #We were not able to get the name of the city to analyze data so we continue the loop.[m
[31m-            print("Sorry we were not able to get the name of the city to analyze data, Please input either chicago, new york city or washington.\n")[m
[31m-[m
[31m-    # TO DO: get user input for month (all, january, february, ... , june)[m
[31m-    month_name = ''[m
[31m-    while month_name.lower() not in MONTH_DATA:[m
[31m-        month_name = input("\nWhat is the name of the month to filter data? (E.g. Input either 'all' to apply no month filter or january, february, ... , june)\n")[m
[31m-        if month_name.lower() in MONTH_DATA:[m
[31m-            #We were able to get the name of the month to analyze data.[m
[31m-            month = month_name.lower()[m
[31m-        else:[m
[31m-            #We were not able to get the name of the month to analyze data so we continue the loop.[m
[31m-            print("Sorry we were not able to get the name of the month to filter data, Please input either 'all' to apply no month filter or january, february, ... , june.\n")[m
[31m-[m
[31m-    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)[m
[31m-    day_name = ''[m
[31m-    while day_name.lower() not in DAY_DATA:[m
[31m-        day_name = input("\nWhat is the name of the day to filter data? (E.g. Input either 'all' to apply no day filter or monday, tuesday, ... sunday)\n")[m
[31m-        if day_name.lower() in DAY_DATA:[m
[31m-            #We were able to get the name of the month to analyze data.[m
[31m-            day = day_name.lower()[m
[31m-        else:[m
[31m-            #We were not able to get the name of the month to analyze data so we continue the loop.[m
[31m-            print("Sorry we were not able to get the name of the day to filter data, Please input either 'all' to apply no day filter or monday, tuesday, ... sunday.\n")[m
[31m-[m
[31m-    print('-'*40)[m
[31m-    return city, month, day[m
[31m-[m
[31m-[m
[31m-def load_data(city, month, day):[m
[31m-[m
[31m-    # load data file into a dataframe[m
[31m-    df = pd.read_csv(city)[m
[31m-[m
[31m-    # convert the Start Time column to datetime[m
[31m-    df['Start Time'] = pd.to_datetime(df['Start Time'])[m
[31m-[m
[31m-    # extract month and day of week from Start Time to create new columns[m
[31m-    df['month'] = df['Start Time'].dt.month[m
[31m-    df['day_of_week'] = df['Start Time'].dt.weekday_name[m
[31m-    df['hour'] = df['Start Time'].dt.hour[m
[31m-[m
[31m-[m
[31m-    # filter by month if applicable[m
[31m-    if month != 'all':[m
[31m-        # use the index of the months list to get the corresponding int[m
[31m-        month = MONTH_DATA.index(month)[m
[31m-[m
[31m-        # filter by month to create the new dataframe[m
[31m-        df = df.loc[df['month'] == month][m
[31m-[m
[31m-    # filter by day of week if applicable[m
[31m-    if day != 'all':[m
[31m-        # filter by day of week to create the new dataframe[m
[31m-        df = df.loc[df['day_of_week'] == day.title()][m
[31m-[m
[31m-    return df[m
[31m-[m
[31m-[m
[31m-def time_stats(df):[m
[31m-[m
[31m-[m
[31m-    print('\nCalculating The Most Frequent Times of Travel...\n')[m
[31m-    start_time = time.time()[m
[31m-[m
[31m-    # TO DO: display the most common month[m
[31m-    common_month = df['month'].mode()[0][m
[31m-    print("The most common month from the given fitered data is: " + MONTH_DATA[common_month].title())[m
[31m-[m
[31m-    # TO DO: display the most common day of week[m
[31m-    common_day_of_week = df['day_of_week'].mode()[0][m
[31m-    print("The most common day of week from the given fitered data is: " + common_day_of_week)[m
[31m-[m
[31m-    # TO DO: display the most common start hour[m
[31m-    common_start_hour = df['hour'].mode()[0][m
[31m-    print("The most common start hour from the given fitered data is: " + str(common_start_hour))[m
[31m-[m
[31m-    print("\nThis took %s seconds." % (time.time() - start_time))[m
[31m-    print('-'*40)[m
[31m-[m
[31m-[m
[31m-def station_stats(df):[m
[31m-  [m
[31m-[m
[31m-    print('\nCalculating The Most Popular Stations and Trip...\n')[m
[31m-    start_time = time.time()[m
[31m-[m
[31m-    # TO DO: display most commonly used start station[m
[31m-    common_start_station = df['Start Station'].mode()[0][m
[31m-    print("The most commonly used start station from the given fitered data is: " + common_start_station)[m
[31m-[m
[31m-    # TO DO: display most commonly used end station[m
[31m-    common_end_station = df['End Station'].mode()[0][m
[31m-    print("The most commonly used end station from the given fitered data is: " + common_end_station)[m
[31m-[m
[31m-    # TO DO: display most frequent combination of start station and end station trip[m
[31m-    frequent_combination = (df['Start Station'] + "||" + df['End Station']).mode()[0][m
[31m-    print("The most frequent combination of start station and end station trip is : " + str(frequent_combination.split("||")))[m
[31m-[m
[31m-    print("\nThis took %s seconds." % (time.time() - start_time))[m
[31m-    print('-'*40)[m
[31m-[m
[31m-[m
[31m-def trip_duration_stats(df):[m
[31m-  [m
[31m-[m
[31m-    print('\nCalculating Trip Duration...\n')[m
[31m-    start_time = time.time()[m
[31m-[m
[31m-    # TO DO: display total travel time[m
[31m-    total_travel_time = df['Trip Duration'].sum()[m
[31m-    print("The total travel time from the given fitered data is: " + str(total_travel_time))[m
[31m-[m
[31m-    # TO DO: display mean travel time[m
[31m-    mean_travel_time = df['Trip Duration'].mean()[m
[31m-    print("The mean travel time from the given fitered data is: " + str(mean_travel_time))[m
[31m-[m
[31m-    print("\nThis took %s seconds." % (time.time() - start_time))[m
[31m-    print('-'*40)[m
[31m-[m
[31m-[m
[31m-def user_stats(df, city):[m
[31m-[m
[31m-[m
[31m-    print('\nCalculating User Stats...\n')[m
[31m-    start_time = time.time()[m
[31m-[m
[31m-    # TO DO: Display counts of user types[m
[31m-    user_types = df['User Type'].value_counts()[m
[31m-    print("The count of user types from the given fitered data is: \n" + str(user_types))[m
[31m-[m
[31m-    if city == 'chicago.csv' or city == 'new_york_city.csv':[m
[31m-        # TO DO: Display counts of gender[m
[31m-        gender = df['Gender'].value_counts()[m
[31m-        print("The count of user gender from the given fitered data is: \n" + str(gender))[m
[31m-[m
[31m-        # TO DO: Display earliest, most recent, and most common year of birth[m
[31m-        earliest_birth = df['Birth Year'].min()[m
[31m-        most_recent_birth = df['Birth Year'].max()[m
[31m-        most_common_birth = df['Birth Year'].mode()[0][m
[31m-        print('Earliest birth from the given fitered data is: {}\n'.format(earliest_birth))[m
[31m-        print('Most recent birth from the given fitered data is: {}\n'.format(most_recent_birth))[m
[31m-        print('Most common birth from the given fitered data is: {}\n'.format(most_common_birth) )[m
[31m-[m
[31m-    print("\nThis took %s seconds." % (time.time() - start_time))[m
[31m-    print('-'*40)[m
[31m-[m
[31m-[m
[31m-def display_raw_data(df):[m
[31m- [m
[31m-    print(df.head())[m
[31m-    next = 0[m
[31m-    while True:[m
[31m-        view_raw_data = input('\nWould you like to view next five row of raw data? Enter yes or no.\n')[m
[31m-        if view_raw_data.lower() != 'yes':[m
[31m-            return[m
[31m-        next = next + 5[m
[31m-        print(df.iloc[next:next+5])[m
[31m-[m
[31m-[m
[31m-def main():[m
[31m-    while True:[m
[31m-        city, month, day = get_filters()[m
[31m-        df = load_data(city, month, day)[m
[31m-[m
[31m-        time_stats(df)[m
[31m-        station_stats(df)[m
[31m-        trip_duration_stats(df)[m
[31m-        user_stats(df, city)[m
[31m-        while True:[m
[31m-            view_raw_data = input('\nWould you like to view first five row of raw data? Enter yes or no.\n')[m
[31m-            if view_raw_data.lower() != 'yes':[m
[31m-                break[m
[31m-            display_raw_data(df)[m
[31m-            break[m
[31m-[m
[31m-        restart = input('\nWould you like to restart? Enter yes or no.\n')[m
[31m-        if restart.lower() != 'yes':[m
[31m-            break[m
[31m-[m
[31m-[m
[31m-if __name__ == "__main__":[m
[31m-    main()[m
\ No newline at end of file[m
